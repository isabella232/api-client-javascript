/**
 * LaunchDarkly REST API
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@launchdarkly.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FeatureFlag', 'model/FeatureFlagBody', 'model/FeatureFlagStatus', 'model/FeatureFlagStatuses', 'model/FeatureFlags', 'model/PatchDelta'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/FeatureFlag'), require('../model/FeatureFlagBody'), require('../model/FeatureFlagStatus'), require('../model/FeatureFlagStatuses'), require('../model/FeatureFlags'), require('../model/PatchDelta'));
  } else {
    // Browser globals (root is window)
    if (!root.LaunchDarklyRestApi) {
      root.LaunchDarklyRestApi = {};
    }
    root.LaunchDarklyRestApi.FlagsApi = factory(root.LaunchDarklyRestApi.ApiClient, root.LaunchDarklyRestApi.FeatureFlag, root.LaunchDarklyRestApi.FeatureFlagBody, root.LaunchDarklyRestApi.FeatureFlagStatus, root.LaunchDarklyRestApi.FeatureFlagStatuses, root.LaunchDarklyRestApi.FeatureFlags, root.LaunchDarklyRestApi.PatchDelta);
  }
}(this, function(ApiClient, FeatureFlag, FeatureFlagBody, FeatureFlagStatus, FeatureFlagStatuses, FeatureFlags, PatchDelta) {
  'use strict';

  /**
   * Flags service.
   * @module api/FlagsApi
   * @version 2.0.0
   */

  /**
   * Constructs a new FlagsApi. 
   * @alias module:api/FlagsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteFeatureFlag operation.
     * @callback module:api/FlagsApi~deleteFeatureFlagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a feature flag by ID
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {String} featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code.
     * @param {module:api/FlagsApi~deleteFeatureFlagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFeatureFlag = function(projectKey, featureFlagKey, callback) {
      var postBody = null;

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling deleteFeatureFlag");
      }

      // verify the required parameter 'featureFlagKey' is set
      if (featureFlagKey === undefined || featureFlagKey === null) {
        throw new Error("Missing the required parameter 'featureFlagKey' when calling deleteFeatureFlag");
      }


      var pathParams = {
        'projectKey': projectKey,
        'featureFlagKey': featureFlagKey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/flags/{projectKey}/{featureFlagKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeatureFlag operation.
     * @callback module:api/FlagsApi~getFeatureFlagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureFlag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single feature flag by key.
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {String} featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code.
     * @param {Object} opts Optional parameters
     * @param {String} opts.environmentKeyQuery The environment key
     * @param {module:api/FlagsApi~getFeatureFlagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureFlag}
     */
    this.getFeatureFlag = function(projectKey, featureFlagKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling getFeatureFlag");
      }

      // verify the required parameter 'featureFlagKey' is set
      if (featureFlagKey === undefined || featureFlagKey === null) {
        throw new Error("Missing the required parameter 'featureFlagKey' when calling getFeatureFlag");
      }


      var pathParams = {
        'projectKey': projectKey,
        'featureFlagKey': featureFlagKey
      };
      var queryParams = {
        'environmentKeyQuery': opts['environmentKeyQuery']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FeatureFlag;

      return this.apiClient.callApi(
        '/flags/{projectKey}/{featureFlagKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeatureFlagStatus operation.
     * @callback module:api/FlagsApi~getFeatureFlagStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureFlagStatuses} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of statuses for all feature flags
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {String} environmentKey The environment key
     * @param {module:api/FlagsApi~getFeatureFlagStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureFlagStatuses}
     */
    this.getFeatureFlagStatus = function(projectKey, environmentKey, callback) {
      var postBody = null;

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling getFeatureFlagStatus");
      }

      // verify the required parameter 'environmentKey' is set
      if (environmentKey === undefined || environmentKey === null) {
        throw new Error("Missing the required parameter 'environmentKey' when calling getFeatureFlagStatus");
      }


      var pathParams = {
        'projectKey': projectKey,
        'environmentKey': environmentKey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FeatureFlagStatuses;

      return this.apiClient.callApi(
        '/flag-statuses/{projectKey}/{environmentKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeatureFlagStatuses operation.
     * @callback module:api/FlagsApi~getFeatureFlagStatusesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureFlagStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of statuses for all feature flags
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {String} environmentKey The environment key
     * @param {String} featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code.
     * @param {module:api/FlagsApi~getFeatureFlagStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureFlagStatus}
     */
    this.getFeatureFlagStatuses = function(projectKey, environmentKey, featureFlagKey, callback) {
      var postBody = null;

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling getFeatureFlagStatuses");
      }

      // verify the required parameter 'environmentKey' is set
      if (environmentKey === undefined || environmentKey === null) {
        throw new Error("Missing the required parameter 'environmentKey' when calling getFeatureFlagStatuses");
      }

      // verify the required parameter 'featureFlagKey' is set
      if (featureFlagKey === undefined || featureFlagKey === null) {
        throw new Error("Missing the required parameter 'featureFlagKey' when calling getFeatureFlagStatuses");
      }


      var pathParams = {
        'projectKey': projectKey,
        'environmentKey': environmentKey,
        'featureFlagKey': featureFlagKey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FeatureFlagStatus;

      return this.apiClient.callApi(
        '/flag-statuses/{projectKey}/{environmentKey}/{featureFlagKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeatureFlags operation.
     * @callback module:api/FlagsApi~getFeatureFlagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureFlags} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all features in the given project.
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {Object} opts Optional parameters
     * @param {String} opts.environmentKeyQuery The environment key
     * @param {String} opts.tag Filter by tag. A tag can be used to group flags across projects.
     * @param {module:api/FlagsApi~getFeatureFlagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureFlags}
     */
    this.getFeatureFlags = function(projectKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling getFeatureFlags");
      }


      var pathParams = {
        'projectKey': projectKey
      };
      var queryParams = {
        'environmentKeyQuery': opts['environmentKeyQuery'],
        'tag': opts['tag']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FeatureFlags;

      return this.apiClient.callApi(
        '/flags/{projectKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchFeatureFlag operation.
     * @callback module:api/FlagsApi~patchFeatureFlagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureFlag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a partial update to a feature.
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {String} featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code.
     * @param {Array.<module:model/PatchDelta>} patchDelta http://jsonpatch.com/
     * @param {module:api/FlagsApi~patchFeatureFlagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureFlag}
     */
    this.patchFeatureFlag = function(projectKey, featureFlagKey, patchDelta, callback) {
      var postBody = patchDelta;

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling patchFeatureFlag");
      }

      // verify the required parameter 'featureFlagKey' is set
      if (featureFlagKey === undefined || featureFlagKey === null) {
        throw new Error("Missing the required parameter 'featureFlagKey' when calling patchFeatureFlag");
      }

      // verify the required parameter 'patchDelta' is set
      if (patchDelta === undefined || patchDelta === null) {
        throw new Error("Missing the required parameter 'patchDelta' when calling patchFeatureFlag");
      }


      var pathParams = {
        'projectKey': projectKey,
        'featureFlagKey': featureFlagKey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FeatureFlag;

      return this.apiClient.callApi(
        '/flags/{projectKey}/{featureFlagKey}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postFeatureFlag operation.
     * @callback module:api/FlagsApi~postFeatureFlagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new feature flag.
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {module:model/FeatureFlagBody} featureFlagBody Create a new feature flag
     * @param {module:api/FlagsApi~postFeatureFlagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postFeatureFlag = function(projectKey, featureFlagBody, callback) {
      var postBody = featureFlagBody;

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling postFeatureFlag");
      }

      // verify the required parameter 'featureFlagBody' is set
      if (featureFlagBody === undefined || featureFlagBody === null) {
        throw new Error("Missing the required parameter 'featureFlagBody' when calling postFeatureFlag");
      }


      var pathParams = {
        'projectKey': projectKey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/flags/{projectKey}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
